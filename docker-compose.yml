# 🐳 Docker Compose for SDS Enterprise
# Complete development environment with all services

version: '3.8'

services:
  # ============================================================================
  # Application Service
  # ============================================================================
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: sds-app
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/sds_enterprise
      - NEXTAUTH_URL=http://localhost:3000
      - NEXTAUTH_SECRET=development-secret-key
      - REDIS_URL=redis://redis:6379
    volumes:
      - .:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - sds-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ============================================================================
  # PostgreSQL Database
  # ============================================================================
  postgres:
    image: postgres:16-alpine
    container_name: sds-postgres
    environment:
      POSTGRES_DB: sds_enterprise
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
    networks:
      - sds-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d sds_enterprise"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100

  # ============================================================================
  # Redis Cache & Session Store
  # ============================================================================
  redis:
    image: redis:7-alpine
    container_name: sds-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - sds-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 30s
    command: redis-server /usr/local/etc/redis/redis.conf

  # ============================================================================
  # Prisma Studio (Database GUI)
  # ============================================================================
  prisma-studio:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: sds-prisma-studio
    ports:
      - "5555:5555"
    environment:
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/sds_enterprise
    volumes:
      - .:/app
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - sds-network
    restart: unless-stopped
    command: npx prisma studio --hostname 0.0.0.0 --port 5555

  # ============================================================================
  # Mailhog (Email Testing)
  # ============================================================================
  mailhog:
    image: mailhog/mailhog:latest
    container_name: sds-mailhog
    ports:
      - "1025:1025"  # SMTP server
      - "8025:8025"  # Web interface
    networks:
      - sds-network
    restart: unless-stopped

  # ============================================================================
  # MinIO (S3-compatible storage)
  # ============================================================================
  minio:
    image: minio/minio:latest
    container_name: sds-minio
    ports:
      - "9000:9000"  # API
      - "9001:9001"  # Console
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    volumes:
      - minio_data:/data
    networks:
      - sds-network
    restart: unless-stopped
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # ============================================================================
  # Monitoring Stack
  # ============================================================================
  
  # Prometheus (Metrics Collection)
  prometheus:
    image: prom/prometheus:latest
    container_name: sds-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - sds-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana (Metrics Visualization)
  grafana:
    image: grafana/grafana:latest
    container_name: sds-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - sds-network
    restart: unless-stopped
    depends_on:
      - prometheus

  # Node Exporter (System Metrics)
  node-exporter:
    image: prom/node-exporter:latest
    container_name: sds-node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    networks:
      - sds-network
    restart: unless-stopped
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'

  # ============================================================================
  # Development Tools
  # ============================================================================
  
  # Nginx (Reverse Proxy & Load Balancer)
  nginx:
    image: nginx:alpine
    container_name: sds-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
    networks:
      - sds-network
    restart: unless-stopped
    depends_on:
      - app

# ============================================================================
# Networks
# ============================================================================
networks:
  sds-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ============================================================================
# Volumes
# ============================================================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# ============================================================================
# Development Commands
# ============================================================================
# Start all services:           docker-compose up -d
# Start only app & database:    docker-compose up -d app postgres redis
# View logs:                    docker-compose logs -f app
# Stop all services:           docker-compose down
# Reset all data:              docker-compose down -v
# Rebuild app:                 docker-compose build app
# Shell into app:              docker-compose exec app sh
# Run Prisma migrations:       docker-compose exec app npx prisma migrate dev
# Access Prisma Studio:        http://localhost:5555
# Access Mailhog:              http://localhost:8025
# Access MinIO Console:        http://localhost:9001
# Access Grafana:              http://localhost:3001 (admin/admin123)
# Access Prometheus:           http://localhost:9090

